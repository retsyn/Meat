picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM1OjQ4Iixtb2RpZmllZD0iMjAyNS0w
NC0wNiAxODozNDozNSIscmV2aXNpb249MTM5MV1dbHo0AOoFAAAsOAAA8yF7WzBdPXtibXA9cHh1
AEMgEBAE8FYHEAfAF9AXwAcQB-BWLGZsYWdzPTAscGFuX3gIAMd5PTAsem9vbT04fSw_APwxICAE
8AIRYCHwAwEWAUABFgHwBBEGASABBgHwBwEGQQYB8AQhfx0R8AIRrhHwAQEuQQ5B8AEBHg0XEQcO
BxEHAQ0A8lIuDScNDg0XDQHAQQ0uLS4dDgGgIS4Rrg0BkBENTgEdDiE_DRGQAQ1eIW0hkBENXg0P
FYGwAQ1eDRxlAcABHS4dLGURoBEdQTxVDEFgAR0RJxElXAURFxFQAR0BRwGVATcBCgAlDIULAPQ0
jBE3AVARDREnERVMFSEXEWABHUEcZREAMXARPawB4CEdnBHwADF8IcDxBZARRRFAEUURcBFlAUAB
ZRFgAXUBQAF1AQgAHzA6AR0xIiFQOgEjETA6AX8REAEGEfAGOgFeQQ1OHRw6AeMuHTxVDAGgAS1B
DCVcBUQBFZVCAQ44AbABRwEVTBURNwFgAUQB4AxlMRcRYBENQYwBEDGAPQGfsHF8QZARRZE1NwE3
oCMhICHwBgEWEQA3AbAHEQYRBhHwByEGEXYCEBE1AfEAAxGeEfACAT5BDiHwAgEuKAE7AQcBDAAQ
PjMBwQcNAcBRTi0eDQ4RkDEBISFwMQGCHiEuDREHAXAzATAXAWA1ARGR6ABRXg0fFWXzAAFyApQh
FxFQER1BTEV0AkE1TAWwJAEklbA2AROgNAEUoGoCIRGwaAL-HyGwET1cgbAhHUwRZQHAMUwBdQHA
AUUBEAEVXAHAESUREAF8AdBBIAFcEfAHYWApAR0fAykBQwpaAgEpAQhaAkBBDxVxNwEB6gAwAQAB
VAMgDU4AAREVNAJAHS4dDA0AEQxMAhB9DAAhHAUMACBtHLIDAW4CsG0sQQwlQWABbQwFNgExXQwl
NAEhXSwzAQiZA5DwAsHwAwFFQQXJADBVAUUuA0NlAUUBBwAfYF4CdAo1ARNBNAFBMScRDTYBMSFH
IY8DYg8VBQFHEZIDMQFHIZMDECxZA-EGAaABfQwlQQwFAaABbRyVMXABbSyFXAEBIwEzJwFgJQEx
JwFwJwHwCScBcBEtgSwhFxGAQWUBHBEAMaAhdTHwA1sCQPAGAXwFAG9cIfAGccAiAR1P----8zQA
GQBjBh-wMQBK-wIICATwAxdANzA3MAYXBkAWoD0AHP8EgA8WNw4QVxBXEAY3BhAONg4wHkMAHf8F
AAYHFgcGACYXpg8WFh4WDqAe8ANDAB3-AQ8WBhAGDgCOEB4QDrAO8AtAAB9-MAXwBQXwE54BHg8x
AP-----------4b-LQDIDxgAyC5ILhheOC4YbhguOF4CCC4YjgIIDjiOAgjeAgieQghucghOIk4S
CB4yXiKegg6yESJhMgDRAGsAHIUPEwMeAx4DDgIAIg8bCAAhDQ4ZACELDQsAUAs_Aw0eDAB0Cx4D
Cw4DDQgAMR4DDQ4AYA8UHgMeEwQA8DYOHxVPFA4DDA4sDgwfFQwUDApMFAwKDAosChwUDDQcOhwk
HBQMChw0CiwaHBoMRAwqHEocBEwaDCQcGgwaFCw0DAoMGgwGAGEEHCocCgw8AD8MGgzXABzwAz8U
DxUPFBQeDxUeFB4UDg0uHQQA8CkkHQ4dDgQNLh0_LS49Dg0eLQ4EDSQODQ4EPQ49Lh0eHV5NDj0O
FA4NThQODQ4NLg0eFA40Hj0eJEIAMB40DSMA8AkORA4tHk0eBE4dDiQeHQ4dFC40Dg0OHQ4GACAE
HusNATwAPw4dDlYCHg8xAP--------------o-8fHxUyDjJuIi4S-hMSLhLOMh4izjIuAo4SLiIu
Es5CviJOMr4yjgIuEj4SLhL_F44AHaMsN1CXIMcQ1wDnAgD-BAYHBrcQJyZ3EAY3hiAWZzZgNkdU
AB2yIEegl1C3MMcg1xBUAP8FpxYXAIcGNwYAdicWIEY3FkBXJmBoAR4PMQD-----------------
-------------9xQbT04fX0=
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM3OjQ1Iixtb2RpZmllZD0iMjAyNS0w
NC0wNiAxODozNDozNiJdXQ==
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM1OjQ4Iixtb2RpZmllZD0iMjAyNS0w
NC0wNiAxODozNDozNSIscmV2aXNpb249MTM5Ml1dbHo0AAIHAADNAAIA8Ql7e2JtcD11c2VyZGF0
YSgiaTE2IiwxMjgEAC8iMAEA----------------------------------------------------
------------------------------8sHzQEAAIPAQD-2B80BAACDwEA-9gfNAQAAg8BAP-YHzQE
AAIPAQD-2B80BAACDwEAVy80MAEA-2wfNAQAIg8BADcvNDABAP9sHzQEACIPAQD-1B80BAAGDwEA
-9QfNAQABg8BAP------5B80BAAuDwEA-6wBxAEfMgQAJQ8AAv------uQ8EACoPAQD---------
------8PLzQxBAAbDwEA-74vNDIEABsPAQD-vi80MgQAGw8BAP__LzQyBAAbDwEADS80MQQACw8B
AP9_HzgEABgBBAIfMdABCy80MgQACw8BAP9_HzgEABguNDIEAAwBAC80MgQADB8xBAAPDwEA-1of
OAQAGC80MgQAABsxBAAfMgQALw8BAP9aHzgEABgvNDIEAFQeMQQADwEA-0YfOAQAfC80MgQAAw8B
AMEPlB1xHzgEAHwvNDIEAAMPAAL-Rhs0BAAfOAQAbC80MgQAAw8BAMEvNDCEAHMIBAAfOAQAhg8B
AL8vNDCEAHMPBAAFHzgEAJQPAQAJFzQEAA8BAH0PlABxKzQyBAAfMAQACx84BACADwEACRc0BAAP
AQB9D5QAcS80MgQAAB8wBAAXHzgEAHAPAQAJHzQEAAgIAQAbNAQADwEAIR80BAAQCAEALzQwAQBv
LzQyBAAUHzAEAGsfOAQACBw0BAAHOBAvNDIEAAgBAgEDNAAPBAAADwEAHQE4AB8yBAAIGjABAC80
MAEAby80MgQAGB8wBABnHzgEAAgcNAQAHzIEABQBAgEDNAAHBAAbMAwADwEAFQE0AB8yBAAIGjAB
AC80MAEAby80MgQAGBswBAAfMgQABB8wBAA-HzgEAAgcNAQAHzIEABQDMAAqMDAMAA8BACUBRAAf
MgQACBowAQAvNDABAG8vNDIEAEAfMAQAQBcxDAAIFAAPGAABHzIEABQfMAEAOy80MHAAGy80MAEA
by80MgQAQB8wBABAHzIUAAEPBAAsHzABAAsfNAQAFAQBAAEQAB8yBAAIACUAGjEwAA8BAG0vNDIE
AJgbMAQAHzIEACwfMAEACA9kABEDJAAEAQABEAAfMgQACB4wBAAPAQD-ah80IAAQLzQyBAAIHzAE
AB0PAQD-fB80IAAQLzQyBAAIHzABAP_sHzQgABAvNDIEAAgWMAEALzQwAQD-oB80IAAQDwQACw8B
AP_sD8ABLg8AAv---3sfNAQAAg8BAAsvNDABAO8bNAQADwEAZR80BAAQDwEABR80BAAmDwEA7x40
BAAPAQBOHzQEADAEAQAMEAAPAQD-Hh80BAAQCAEAHzQEAAIPAQATHzQEABwIAQAfNAQACg8BAP8o
HzQEABAIAQAfNAQAAg8BAEMXNAQACAEALzQwAQD-bB40BAAPAQD-2x40BAAPAQD-------------
-------------------------------------------------------------------------2cf
NAQAAg8BAP-YLjQyBAAPAAL-----8S80MgQAFw8BAK0vNDIAAv--fS80MgQArw8BAJkvNDIAAgMf
NJAAZg8AAv8ELzQxBAADDAEADhgAD1QADB8yBAABDwAC-4EWMggACQQAHjEEAA4YAA8oAAgP-AEC
DwACMy80MgQA5w8BAD0vNDIEAFgOvAEPBAD-SB8xBAAUDgAEDwQAMPEcIiksaGlkZGVuPWZhbHNl
LG5hbWU9ImNvbGxpZGFibGUiLHBhbl94PTkzOQoA8gB5PTk4NCx0aWxlX2g9MTYKABB3CgDxEHpv
b209MX0se2JtcD11c2VyZGF0YSgiaTE2IiwxMjgEAC8iMAEA----------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
---------_zxCiIpLGhpZGRlbj1mYWxzZSxwYW5feD05MzkKAPIAeT05ODQsdGlsZV9oPTE2CgAQ
dwoAgHpvb209MX19
:: map/1.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTA2IDE1OjIxOjE0Iixtb2RpZmllZD0iMjAyNS0w
NC0wNiAxODozNDozNSIscmV2aXNpb249MTczXV1sejQA5AAAAE4QAADwCHt7Ym1wPXVzZXJkYXRh
KCJpMTYiLDMyAwBfIjAwODAEAG8PAQBiD4AA--8OfzgxMDA4MjCAAFAPAQAJD4AA--8RDqgCD4AA
HQ8BADEPgAD-TA6MBA8kAjMOgAAPAQBJD4AAlw5wAQ8BAEMOgAAPOAAAD6AASA6AAA8BABkPgACX
DjABDoAADwEATw_AAP_UDlwDD1ACBg8BAC4OgAAPAQBDDrAADoAADwEATw_AAP8IDwQAZ7EiKSxw
YW5feD05OAkA8gB5PTIwNSx0aWxlX2g9MTYKABB3CgCAem9vbT0xfX0=
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM3OjQ1Iixtb2RpZmllZD0iMjAyNS0w
NC0wNiAxODozNDozNiJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM1OjQ5Iixtb2RpZmllZD0iMjAyNS0w
NC0wNiAxODozNDozNSIscmV2aXNpb249MTM0OF1dbHo0AKAAAAALCgAA-zBweHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDKAQIDQA8PkAQFBgdADJAICQoLQAyQDwwPDQ8ODEAM8P8BAOv-J6oB
EAYPIBABIAEgAfAAAhACDhABIA8hIAEwD0Dwww8oD--wxg-4Cg--D4AP9w8NAfAJARAGDjAA----
--_9H-8BAKzPyA9AAA8QQP--sPD-AQD-6lD-----KQ==
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM3OjQ1Iixtb2RpZmllZD0iMjAyNS0w
NC0wNiAxODozNDozNiJdXQ==
:: actors.lua
--[[pod_format="raw",created="2025-03-05 17:41:28",modified="2025-04-06 18:34:35",revision=1552]]
-- Actor module for MEAT
include "data.lua" -- For sprite info
include "tilemap.lua" -- For tilemap interaction

-- global table
actors = {}


function create_actor(type, newx, newy, playable)
	local new_actor = {}
	
	-- Essentials
	new_actor.is_playable = playable
	
	-- Sprite Info
	new_actor.sprite_index = type
	new_actor.x = newx
	new_actor.y = newy
	new_actor.hflip = false
	new_actor.vflip = false
	
	-- Rect Info
	new_actor.w = 32
	new_actor.h = 32
	
	-- Collision Stats
	new_actor.sideskin = 4
	new_actor.topskin = 3
		
	-- Animation Data
	new_actor.animreel = generic_anims.idle
	new_actor.ticker = 0
	new_actor.animspeed = 5
	new_actor.frame = 1
	
	-- Physics Data
	new_actor.vx = 0
	new_actor.vy = 0
	new_actor.gfriction = 0.25
	new_actor.afriction = 0.01
	
	-- Character Movement info
	new_actor.accel = 0.5
	new_actor.gspeed = 2.0
	
	-- "AI" thinking
	new_actor.thought_time = 100
	new_actor.thought_tick = 0
		
	-- Drawing actors:
	function new_actor:draw()
		-- Must catch if previous anim frame is higher than the reel allows
		if(self.frame > #self.animreel) then
			self.frame = 1
		end

		spr(self.sprite_index + self.animreel[self.frame], self.x, self.y, self.hflip, self.vflip)
	end
	
	function new_actor:collision()	
		nx = self.x + self.vx
		ny = self.y + self.vy

		-- Collision		
		-- down
		if(self.vy > 0) then
			for i = math.floor(self.y), math.floor(ny) do
				if is_solid16(nx + self.sideskin + 2, i + self.h) or is_solid16(nx + self.w - self.sideskin - 1, i + self.h) then
					self.vy = 0
					self.y = i
					break
				end
			end
		end
		
		-- up
		if(self.vy < 0) then
			for i = math.floor(self.y), math.floor(ny), -1 do
				-- The "sideskin + 2" is because floor() biases to the left.
				if is_solid16(nx + self.sideskin + 2, i + 1) or is_solid16(nx + self.w - self.sideskin - 1, i) then
					self.vy = 0
					self.y = i
					break
				end
			end
		end

		-- left
		if(self.vx < 0) then
			for i = math.floor(self.x), math.floor(nx), -1 do
				if is_solid16(i + self.sideskin, self.y + self.topskin) or is_solid16(i + self.sideskin, self.y + self.h - 1) then
					self.vx = 0
					self.x = i
					break
				end
			end
		end

		-- right
		if(self.vx > 0) then
			for i = math.floor(self.x), math.floor(nx) do
				if is_solid16(i + self.w - self.sideskin, self.y + self.topskin) or is_solid16(i + self.w - self.sideskin, self.y + self.h - 1) then
					self.vx = 0
					self.x = i
					break
				end
			end
		end
	end
	
	function new_actor:physics()
		-- Apply Gravity
		self.vy += 0.25
		
		self:collision()	

		-- Apply velocities
		self.x += self.vx
		self.y += self.vy

		-- On Ground physics only:
		if(self.vx > 0 and self.vx > self.gspeed) then
			self.vx = self.gspeed
		elseif (self.vx < 0 and self.vx < -self.gspeed) then
			self.vx = -self.gspeed
		end
		
		if(self.vx > 0) then
			self.vx -= self.gfriction
		elseif(self.vx < 0) then
			self.vx += self.gfriction
		end
		
		-- Friction "juggle" fix
		if(abs(self.vx) < self.gfriction) then
			self.vx = 0
		end
	end
	
	function new_actor:animate()
	
		-- Based on physics, choose reel:
		if(abs(self.vx) > 0) then
			self.animreel = generic_anims.walk
		else
			self.animreel = generic_anims.idle
		end

		self.ticker += 1
		if(self.ticker > self.animspeed) then
			self.ticker = 0
			self.frame += 1
			if(self.frame > #self.animreel) then
				self.frame = 1
			end
		end
	end
	
	function new_actor:get_input()
		if(btn(0)) then
			self.vx -= self.accel
			self.hflip = true
		end
		
		if(btn(1)) then
			self.vx += self.accel
			self.hflip = false
		end
		
		if(btn(4)) then
			self.vy = - 5
		end
	end
	
	function new_actor:ai()
		self.thought_tick -= 1
		if(self.thought_tick <= 0) then
			self.thought_tick = self.thought_time + rnd(25)
			self.hflip = not self.hflip
		end
		
		if(self.hflip) then
			self.vx -= self.accel
		else
			self.vx += self.accel
		end
	end
	
	function new_actor:control()
		if(self.is_playable) then
			self:get_input()
		else
			self:ai()
		end
	end
	
	function new_actor:collide_actor(other)
		local ax1 = self.x + self.sideskin
		local ay1 = self.y + self.topskin
		local ax2 = self.x + self.w - self.sideskin
		local ay2 = self.y + self.h -- assuming no bottomskin
	
		local bx1 = other.x + other.sideskin
		local by1 = other.y + other.topskin
		local bx2 = other.x + other.w - other.sideskin
		local by2 = other.y + other.h
	
		if ax1 < bx2 and ax2 > bx1 and ay1 < by2 and ay2 > by1 then
			return true
		else
			return false
		end
	end
	
	add(actors, new_actor)
end


:: camera.lua
--[[pod_format="raw",created="2025-04-04 15:48:10",modified="2025-04-06 18:34:35",revision=549]]
-- The camera module!

camerax = 0
cameray = 0
camera_bx = 40
camera_by = 16
world_bound = true
tsize = 16
mapw = 128
maph = 128

function update_camera()
	if(world_bound) then
		if(camerax < 0) then
	 		camerax = 0
		end
		if(cameray < 0) then
			cameray = 0
		end
		
		if(camerax > (mapw * tsize) - 480) then
			camerax = (mapw * tsize) - 480
		end
		if(cameray > (maph * tsize) - 270) then
			cameray = maph * tsize - 270
		end
	end

	camera(camerax, cameray)
		
end


function lock_camera(entity)
	camerax = entity.x - 256 + entity.w / 2
	cameray = entity.y - 128 + entity.h / 2
end


function bound_camera(entity)
	local px = entity.x - 256 + entity.w / 2
	local py = entity.y - 128 + entity.h / 2

	if px > camerax + camera_bx then
		camerax = px - camera_bx
	elseif px < camerax - camera_bx then
		camerax = px + camera_bx
	end

	if py > cameray + camera_by then
		cameray = py - camera_by
	elseif py < cameray - camera_by then
		cameray = py + camera_by
	end
end
:: data.lua
--[[pod_format="raw",created="2025-03-05 18:46:07",modified="2025-04-06 18:34:35",revision=1086]]
-- Data stuff

generic_anims = {
	idle = {0, 1},
	walk = {2, 3, 4, 3},
}
:: ephemerals.lua
--[[pod_format="raw",created="2025-04-06 00:13:16",modified="2025-04-06 18:34:35",revision=368]]
-- Ephemerals Module, for particles and things that don't last.

ephemerals = {}


function create_ephem(type, newx, newy, vx, vy)
	local new_ephem = {}
	
	new_ephem.sprite_index = type
	new_ephem.x = newx
	new_ephem.y = newy
	new_ephem.vx = vx
	new_ephem.vy = vy
	new_ephem.frame = 0
	new_ephem.animspeed = 5
	new_ephem.animticker = 0
	new_ephem.grav = 0
	new_ephem.delete = false
	new_ephem.frame_count = 5
	
	function new_ephem:draw()
		spr(self.sprite_index + self.frame, self.x, self.y)
	end
	
	function new_ephem:animate()
		self.animticker += 1
		if(self.animticker >= self.animspeed) then
			self.animticker = 0
			self.frame += 1
			if(self.frame > self.frame_count) then
				self.delete = true
			end
		end
	end
	
	function new_ephem:update()
		self.x += self.vx
		self.y += self.vy + self.grav
		
		if self.delete then
			for i, e in ipairs(ephemerals) do
				if e == self then
					del(ephemerals, self)
					break
				end
			end
		end		
	end
	
	add(ephemerals, new_ephem)
end
:: main.lua
--[[pod_format="raw",created="2025-01-17 10:35:48",modified="2025-04-06 18:34:35",revision=1541]]
include "actors.lua"
include "camera.lua"
include "ephemerals.lua"

function _init()
	create_actor(1, 100, 20, true)
	create_actor(1, 200, 100)
	create_actor(1, 260, 100)
	
	-- Get the background map
	bg = fetch("map/1.map")[1].bmp
end


function _update()

	-- Update Actors
	for i, actor in ipairs(actors) do
		actor:control()
		actor:physics()
	end
		
	-- Update Ephemerals
	for i, ephem in ipairs(ephemerals) do
		ephem:update()
	end
	
	-- Bind Camera to first actor
	bound_camera(actors[1])

	-- Test collisions against actor #1 only.
	for i = 2, #actors do
		local other = actors[i]
		if(actors[1]:collide_actor(other)) then
			actors[1].vy = -2
		end
	end

end


function _draw()
	cls(12)
	
	-- draw background if BG is populated
	if(bg != nil) then
		draw_bg_layer(bg)
	end

	update_camera()

	-- Draw foreground
	map(0,0,0,0,128,128)

	for i, actor in ipairs(actors) do
		actor:animate()
		actor:draw()
	end
	
	for i, ephem in ipairs(ephemerals) do
		ephem:animate()
		ephem:draw()
	end
	
	camera()
	print("CAMX: " .. camerax .. "\nCAMY:" .. cameray)

end
:: tilemap.lua
--[[pod_format="raw",created="2025-04-01 17:23:51",modified="2025-04-06 18:34:35",revision=1020]]
-- Tilemap module for MEAT

include "camera.lua"

lowest_solid = 1
highest_solid = 127


function is_solid16(x, y)
	local collided_index = mget(x//16, y//16, 0)
	if(collided_index == nil) then
		return true
	end
	if(collided_index >= lowest_solid and collided_index <= highest_solid) then
		return true
	else 
		return false
	end
end

function draw_bg_layer(maplayer)
	local mh = 32
	local mw = 32 
	local cx = camerax
	local cy = cameray
	if(cx < 0) cx = 0
	if(cy < 0) cy = 0
	if(cx > (mapw * tsize) - 480) then
		cx = (mapw * tsize) - 480
	end
	if(cy > (maph * tsize) - 270) then
		cy = maph * tsize - 270
	end

	for dx = -1, 1 do
		for dy = -1, 1 do
			local ox = (cx / 10 / mw) * mw
			local oy = (cy / 10 / mh) * mh
			map(bg,
				0, 0, 
				dx * mw * 16 - (cx / 10 % (mw * 8)),
				dy * mh * 16 - (cy / 10 % (mh * 8)),
				mw, mh)
		end
	end
end
:: utils.lua
--[[pod_format="raw",created="2025-04-02 01:12:55",modified="2025-04-06 00:12:53",revision=512]]
-- Utility funcs that a Python boy usually expects to just be there.

function contains(list, value)
	for _, v in ipairs(list) do
   	if v == value then
			return true
		end
	end
	return false
end
:: utils.py
b64$LS1bW3BvZF9mb3JtYXQ9InJhdyIsY3JlYXRlZD0iMjAyNS0wNC0wMiAwMDoxNTozMyIsbW9k
aWZpZWQ9IjIwMjUtMDQtMDIgMDE6MTI6MzMiLHJldmlzaW9uPTUzXV0KLS0gVXRpbGl0eSBmdW5j
cyB0aGF0IGEgUHl0aG9uIGJveSB1c3VhbGx5IGV4cGVjdHMgdG8ganVzdCBiZSB0aGVyZS4KCmZ1
bmN0aW9uIGNvbnRhaW5zKGxpc3QsIHZhbHVlKQoJZm9yIF8sIHYgaW4gaXBhaXJzKGxpc3QpIGRv
CiAgIAlpZiB2ID09IHZhbHVlIHRoZW4KCQkJcmV0dXJuIHRydWUKCQllbmQKCWVuZAoJcmV0dXJu
IGZhbHNlCmVuZA==
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM3OjQ1Iixtb2RpZmllZD0iMjAyNS0w
NC0wNiAxODozNDozNiIscnVudGltZT0xNyx3b3Jrc3BhY2VzPXt7bG9jYXRpb249Im1haW4ubHVh
IzUwIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJhY3RvcnMubHVhIzIwMiIsd29ya3Nw
YWNlX2luZGV4PTF9LHtsb2NhdGlvbj0iZGF0YS5sdWEjMSIsd29ya3NwYWNlX2luZGV4PTF9LHts
b2NhdGlvbj0idGlsZW1hcC5sdWEjMzIiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImNh
bWVyYS5sdWEjMjEiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImVwaGVtZXJhbHMubHVh
IzExIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJnZngvMC5nZngiLHdvcmtzcGFjZV9p
bmRleD0yfSx7bG9jYXRpb249Im1hcC8wLm1hcCIsd29ya3NwYWNlX2luZGV4PTN9LHtsb2NhdGlv
bj0ibWFwLzEubWFwIix3b3Jrc3BhY2VfaW5kZXg9M30se2xvY2F0aW9uPSJzZngvMC5zZngiLHdv
cmtzcGFjZV9pbmRleD00fX1dXQ==
:: [eoc]
