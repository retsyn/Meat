picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM1OjQ4Iixtb2RpZmllZD0iMjAyNS0w
NC0wMiAyMzoyODoxNiIscmV2aXNpb249Nzc4XV1sejQA7QMAAFA2AADzIXtbMF09e2JtcD1weHUA
QyAQEATwVgcQB8AX0BfABxAH8FYsZmxhZ3M9MCxwYW5feAgAx3k9MCx6b29tPTh9LD4A-DEgIATw
AhFgIfADARYBQAEWAfAEEQYBIAEGAfAHAQZBBgHwBCF-HRHwAhGuEfABAS5BDkHwAQEeDRcRBw4H
EQcBDQDyUi4NJw0ODRcNAcBBDS4tLh0OAaAhLhGuDQGQEQ1OAR0OIT4NEZABDV4hbSGQEQ1eDQ8V
gbABDV4NHGUBwAEdLh0sZRGgER1BPFUMQWABHREnESVcBREXEVABHQFHAZUBNwEKACUMhQsA9DSM
ETcBUBENEScRFUwVIRcRYAEdQRxlEQAxcBE9rAHgIR2cEfAAMXwhwPEFkBFFEUARRRFwEWUBQAFl
EWABdQFAAXUBCAAfMDoBHTEiIVA6ASMRMDoBfxEQAQYR8AY6AV5BDU4dHDoB4y4dPFUMAaABLUEM
JVwFRAEVlUIBDjgBsAFHARVMFRE3AWABRAHgDGUxFxFgEQ1BjAEQMYA9AZ_wcXxBkBFFkTU3ATeg
IyEgIfAGARYRADcBsAcRBhEGEfAHIQYRdgIQETUB8QADEZ4R8AIBPkEOIfACAS4oATsBBwEMABA_
MwHBBw0BwFFOLR4NDhGQMQEhIXAxAYIeIS4NEQcBcDMBMBcBYDUBEZHoAFFeDR8VZfMAAXIClCEX
EVARHUFMRXQCQTVMBbAkASSVsDYBE6A0ARSgagIhEbBoAv8fIbARPVyBsCEdTBFlAcAxTAF1AcAB
RQEQARVcAcARJREQAXwB0EEgAVwR8AdhYCkBHR8DKQFDCloCASkBCFoCQEEPFXE3AQHqADABAAFU
AyANTgABERU0AkAdLh0MDQARDEwCEH0MACEcBQwAIG0csgMBbgKwbSxBDCVBYAFtDAU2ATFdDCU0
ASFdLDMBCJkDkPACwfADAUVBBckAMFUBRS4DQ2UBRQEHAB9gXgJ0CjUBE0E0AUExJxENNgExIUch
jwNiDxUFAUcRkgMxAUchkwMQLFkD8QYBoAF9DCVBDAUBoAFtHJUxcAFtLIVcAQEjATMnAWAlATEn
AXAnAfAJJwFwES2BLCEXEYBBZQEcEQAxoCF1MfADWwJA8AYBfAUAb1wh8AZxwCIBHU-----zNAAZ
AGMGH-AxAP-------------e-zIACL8YAgAoniIOGB4iHlI_Ih5iHiI_Ug8VDiIegg0OAj6CDQ7S
DQ6STQ5ifQ5CLUIdDhI9Ui2SjQK9ES1hPQDRAKEAHg8xAP------------------------------
-----------------4tQbT04fX0=
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM3OjQ1Iixtb2RpZmllZD0iMjAyNS0w
NC0wMiAyMzoyODoxNiJdXQ==
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM1OjQ4Iixtb2RpZmllZD0iMjAyNS0w
NC0wMiAyMzoyODoxNiIscmV2aXNpb249Nzc3XV1sejQAygIAAHBAAADwCHt7Ym1wPXVzZXJkYXRh
KCJpMTYiLDY0AwAvIjABAP--8C80MAAB--AfNAAB-zkOUAAPIAADLzQwAQBzHzRQAEAfNCAAEC80
MAEAcx80ZABUGzQMAAQEAA8BAG0fNGQAVA8EAAMPAQBvHzQQAAAEBAAPAQAJGzQEAA8BAAkfNAQA
Bg8BAG8fNBAAAAgEAA8BAAUbNAQADwEACR80BAAGDwEAbx80FAAEBAQADwEABRs0BAAMAQAfNAQA
Eg8BAG8XNAQABAEAHjQEAA8BACofNAQABg8BAHMXNAQACAEAFzQEAA8BABkfNAQAFg8BAP------
----------94HzQAAf-xDAQADwEA2R40BAAPAQC_FzQEAAwBAB80BAAKDwEAsxs0BAAIAQAMEAAE
FAAPBAAJDwEAnRc0BAAMAQAOFAAGGAAPBAAVDwEAjR80BAAKDwEAFx80BABsDwEACRs0BAAPAQAS
DywAHAQwAA8EAGUPAQAJGzQEAA8BABIPLAAcBDAACAQADwEABR80BABADwEACRs0BAAPAQAVLzQw
AQBDHzQEAEAXMAwABAQABAEAGzQEAA8BABUvNDABAEMfNAQAQBcwDAAEBAAPAQAtLzQwAQCbGzQE
AA8BAC0vNDABAKgPAAH-------8CHzQEAAIPAQALHjQEAA8BAGYfNAQAEA8BAAUfNAQAOg8BAE8f
NAQAMAQBAAwQAA8BAB0fNAQAEAgBAB80BAACDwEAEx80BAAcCAEAHzQEAAoPAQAnHzQEABAIAQAf
NAQAAg8BAEMXNAQACAEALzQwAQBrHjQEAA8BANoeNAQADwEA-------------67xHSIpLGhpZGRl
bj1mYWxzZSxuYW1lPSJjb2xsaWRhYmxlIixwYW5feD0tMzE5CwDyAXk9LTM5MCx0aWxlX2g9MTYK
ABB3CgCAem9vbT0xfX0=
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM3OjQ1Iixtb2RpZmllZD0iMjAyNS0w
NC0wMiAyMzoyODoxNiJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM1OjQ5Iixtb2RpZmllZD0iMjAyNS0w
NC0wMiAyMzoyODoxNiIscmV2aXNpb249NzU4XV1sejQAoAAAAAsKAAD-MHB4dQADKAAABAAED0AQ
Ag4AAaABIAKgDgAPEAAN8MoBAgNADw_QBAUGB0AMkAgJCgtADJAPDA8NDw4MQAzw-wEA6-8nqgEQ
Bg8gEAEgASAB8AACEAIOEAEgDyEgATAPQPDDDygP--DGD-gKD-8PgA-3Dw0B8AkBEAYOMAD-----
-70f-wEArM-ID0AADxBA--_w8P8BAP-qUP----8p
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM3OjQ1Iixtb2RpZmllZD0iMjAyNS0w
NC0wMiAyMzoyODoxNiJdXQ==
:: actors.lua
--[[pod_format="raw",created="2025-03-05 17:41:28",modified="2025-04-02 23:28:16",revision=923]]
-- Actor module for MEAT
include "data.lua" -- For sprite info
include "tilemap.lua" -- For tilemap interaction

-- global table
actors = {}



function create_actor(type, newx, newy, playable)
	local new_actor = {}
	
	-- Essentials
	new_actor.is_playable = playable
	
	-- Sprite Info
	new_actor.sprite_index = type
	new_actor.x = newx
	new_actor.y = newy
	new_actor.hflip = false
	new_actor.vflip = false
	
	-- Rect Info
	new_actor.w = 32
	new_actor.h = 32
		
	-- Animation Data
	new_actor.animreel = generic_anims.idle
	new_actor.ticker = 0
	new_actor.animspeed = 5
	new_actor.frame = 1
	
	-- Physics Data
	new_actor.vx = 0
	new_actor.vy = 0
	new_actor.gfriction = 0.25
	new_actor.afriction = 0.01
	
	-- Character Movement info
	new_actor.accel = 0.5
	new_actor.gspeed = 2.0
	
	-- "AI" thinking
	new_actor.thought_time = 100
	new_actor.thought_tick = 0
		
	-- Drawing actors:
	function new_actor:draw()
		-- Must catch if previous anim frame is higher than the reel allows
		if(self.frame > #self.animreel) then
			self.frame = 1
		end

		spr(self.sprite_index + self.animreel[self.frame], self.x, self.y, self.hflip, self.vflip)
	end
	
	function new_actor:collision()
		
		nx = self.x + self.vx
		ny = self.y + self.vy	

		-- Collision		
		-- down
		if(self.vy > 0) then
			for i = math.floor(self.y), math.floor(ny) do
				if is_solid16(nx, i + self.h) or is_solid16(nx + self.w, i + self.h) then
					self.vy = 0
					self.y = i
					break
				end
			end
		end
		
		-- up
		if(self.vy < 0) then
			for i = math.floor(self.y), math.floor(ny), -1 do
				if is_solid16(nx, i) or is_solid16(nx + self.w, i) then
					self.vy = 0
					self.y = i
					break
				end
			end
		end

		
		-- left
		if(self.vx < 0) then
			for i = math.floor(self.x), math.floor(nx), -1 do
				if is_solid16(i, self.y) or is_solid16(i, self.y + self.h - 1) then
					self.vx = 0
					self.x = i
					break
				end
			end
		end

		-- right
		if(self.vx > 0) then
			for i = math.floor(self.x), math.floor(nx) do
				if is_solid16(i + self.w, self.y) or is_solid16(i + self.w, self.y + self.h - 1) then
					self.vx = 0
					self.x = i
					break
				end
			end
		end



	end
	
	function new_actor:physics()
		-- Apply Gravity
		self.vy += 0.25
		
		self:collision()	

		-- Apply velocities
		self.x += self.vx
		self.y += self.vy

		
		-- On Ground physics only:
		if(self.vx > 0 and self.vx > self.gspeed) then
			self.vx = self.gspeed
		elseif (self.vx < 0 and self.vx < -self.gspeed) then
			self.vx = -self.gspeed
		end
		
		if(self.vx > 0) then
			self.vx -= self.gfriction
		elseif(self.vx < 0) then
			self.vx += self.gfriction
		end
		
		-- Friction "juggle" fix
		if(abs(self.vx) < self.gfriction) then
			self.vx = 0
		end
	end
	
	function new_actor:animate()
	
		-- Based on physics, choose reel:
		if(abs(self.vx) > 0) then
			self.animreel = generic_anims.walk
		else
			self.animreel = generic_anims.idle
		end

		self.ticker += 1
		if(self.ticker > self.animspeed) then
			self.ticker = 0
			self.frame += 1
			if(self.frame > #self.animreel) then
				self.frame = 1
			end
		end
	end
	
	function new_actor:get_input()
		if(btn(0)) then
			self.vx -= self.accel
			self.hflip = true
		end
		
		if(btn(1)) then
			self.vx += self.accel
			self.hflip = false
		end
		
		if(btn(4)) then
			self.vy = - 5
		end
	end
	
	function new_actor:ai()
		self.thought_tick -= 1
		if(self.thought_tick <= 0) then
			self.thought_tick = self.thought_time + rnd(25)
			self.hflip = not self.hflip
		end
		
		if(self.hflip) then
			self.vx -= self.accel
		else
			self.vx += self.accel
		end
	end
	
	function new_actor:control()
		if(self.is_playable) then
			self:get_input()
		else
			self:ai()
		end
	end
	
	add(actors, new_actor)
end


:: data.lua
--[[pod_format="raw",created="2025-03-05 18:46:07",modified="2025-04-02 23:28:16",revision=489]]
-- Data stuff

generic_anims = {
	idle = {0, 1},
	walk = {2, 3, 4, 3},
}
:: main.lua
--[[pod_format="raw",created="2025-01-17 10:35:48",modified="2025-04-02 23:28:16",revision=822]]
include "actors.lua"

function _init()
	create_actor(1, 100, 20, true)

	create_actor(1, 200, 100)
	create_actor(1, 260, 100)

end


function _update()

	-- Update Actors
	for i, actor in ipairs(actors) do
		actor:control()
		actor:physics()
	end
end


function _draw()
	cls(12)
	
	map(0,0,0,0,64,64)

	for i, actor in ipairs(actors) do
		actor:animate()
		actor:draw()
	end
	
end
:: tilemap.lua
--[[pod_format="raw",created="2025-04-01 17:23:51",modified="2025-04-02 23:28:16",revision=376]]
-- Tilemap module for MEAT
include "utils.lua"


function is_solid16(x, y)

	if(mget(x // 16, y // 16, 0) != 0) then
		return true
	else 
		return false
	end
end
	

:: utils.lua
--[[pod_format="raw",created="2025-04-02 01:12:55",modified="2025-04-02 23:28:16",revision=254]]
-- Utility funcs that a Python boy usually expects to just be there.

function contains(list, value)
	for _, v in ipairs(list) do
   	if v == value then
			return true
		end
	end
	return false
end
:: utils.py
b64$LS1bW3BvZF9mb3JtYXQ9InJhdyIsY3JlYXRlZD0iMjAyNS0wNC0wMiAwMDoxNTozMyIsbW9k
aWZpZWQ9IjIwMjUtMDQtMDIgMDE6MTI6MzMiLHJldmlzaW9uPTUzXV0KLS0gVXRpbGl0eSBmdW5j
cyB0aGF0IGEgUHl0aG9uIGJveSB1c3VhbGx5IGV4cGVjdHMgdG8ganVzdCBiZSB0aGVyZS4KCmZ1
bmN0aW9uIGNvbnRhaW5zKGxpc3QsIHZhbHVlKQoJZm9yIF8sIHYgaW4gaXBhaXJzKGxpc3QpIGRv
CiAgIAlpZiB2ID09IHZhbHVlIHRoZW4KCQkJcmV0dXJuIHRydWUKCQllbmQKCWVuZAoJcmV0dXJu
IGZhbHNlCmVuZA==
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM3OjQ1Iixtb2RpZmllZD0iMjAyNS0w
NC0wMiAyMzoyODoxNiIscnVudGltZT0xNyx3b3Jrc3BhY2VzPXt7bG9jYXRpb249Im1haW4ubHVh
IzEiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImFjdG9ycy5sdWEjMTAxIix3b3Jrc3Bh
Y2VfaW5kZXg9MX0se2xvY2F0aW9uPSJkYXRhLmx1YSMxIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xv
Y2F0aW9uPSJ0aWxlbWFwLmx1YSMxIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJ1dGls
cy5sdWEjOSIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0iZ2Z4LzAuZ2Z4Iix3b3Jrc3Bh
Y2VfaW5kZXg9Mn0se2xvY2F0aW9uPSJtYXAvMC5tYXAiLHdvcmtzcGFjZV9pbmRleD0zfSx7bG9j
YXRpb249InNmeC8wLnNmeCIsd29ya3NwYWNlX2luZGV4PTR9fV1d
:: [eoc]
